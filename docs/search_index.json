[["index.html", "AlberdiLab | van-Riemsdijk et al. in prep Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | van-Riemsdijk et al. in prep Study title to be added Isolde van Riemsdijk1 Antton Alberdi2 2024-08-26 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/bombina_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Copenhagen, isolde.vanriemsdijk@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0163_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Genome metadata genome_metadata &lt;- read_tsv(&quot;data/DMB0163_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.3 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0163_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0163_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0163.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_rag2rketcs4x046znapu .table td.tinytable_css_z5krhsn2yy52aiiongdy, .table th.tinytable_css_z5krhsn2yy52aiiongdy { border-bottom: solid 0.1em #d3d8dc; } Total Average 597.79 8.54 ± 5.56 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_wy8vki9nb3528035nyqm .table td.tinytable_css_ns56sj4g1xbdisx5imu2, .table th.tinytable_css_ns56sj4g1xbdisx5imu2 { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01695 0.3461828 0.04127063 4.7400240 1.38511397 EHI01696 0.4424049 0.22406116 5.2067968 4.16427478 EHI01697 0.4538495 1.90941404 2.6774953 4.97927029 EHI01698 0.3573398 0.09858151 1.5648997 5.72228546 EHI01699 0.7050913 0.96951518 9.2592759 3.23009714 EHI01700 0.6530752 3.56898382 5.4267930 2.69687302 EHI01701 0.6766729 1.02592777 9.5467908 5.35279961 EHI01702 2.0469307 6.03379949 3.6116400 0.73573430 EHI02539 0.3827939 2.10175438 0.6702584 2.51435097 EHI02540 0.2894728 0.06305983 3.6420609 1.09738739 EHI02541 0.3558753 1.56532915 3.3635533 0.34978257 EHI02542 0.3057734 0.50281622 3.3675884 1.15059446 EHI02543 0.2922985 1.49232932 2.1216200 0.72305361 EHI02544 0.2855385 1.56564203 2.6337528 0.46383762 EHI02545 0.2670672 0.73205372 2.4329955 0.95292229 EHI02546 0.2586405 0.16795995 3.3770126 0.49244428 EHI02547 0.3008971 0.81598900 2.4432359 0.76095536 EHI02548 0.4029082 3.01122533 1.3972360 0.73737227 EHI02549 0.2416728 2.25765984 1.5929248 0.08999338 EHI02550 0.3503026 1.60144298 2.6998897 0.53139664 EHI02551 0.3498223 1.58505167 4.0510150 0.34687279 EHI02552 0.3302045 0.22839638 2.3310807 2.39603666 EHI02553 0.3967339 4.87817718 0.9358511 0.11364100 EHI02554 0.3571701 2.80270276 1.7801746 0.22381026 EHI02555 0.2667084 0.11165708 4.4604214 0.09433396 EHI02556 0.3658946 0.61175432 3.8143150 0.46989808 EHI02557 0.3394130 0.18079785 4.5624603 0.59561999 EHI02558 0.2934713 2.77323519 1.0902707 0.11609862 EHI02559 0.3534224 1.47632000 3.0539968 0.58497163 EHI02561 0.2738579 1.43694682 0.6187500 1.36277291 EHI02562 0.3863222 2.31751232 2.5741783 0.18187293 EHI02563 0.1714629 0.64207433 0.9746465 0.23628290 EHI02564 0.3836564 2.85852293 1.6403990 0.51015831 EHI02565 0.3826623 3.07394910 1.6474384 0.17599439 EHI02566 0.2833160 0.28354132 3.0403662 1.11818509 EHI02567 0.3354668 0.96849190 1.8312798 0.18332607 EHI02568 0.3722740 1.50653673 1.3524144 1.66460411 EHI02569 0.3707787 1.83758111 2.4210436 0.23655095 EHI02570 0.4532710 4.17998256 0.9421899 0.06150104 EHI02661 0.5505824 3.58589734 1.1707615 4.16354989 EHI02662 0.9068807 0.23641569 12.7506346 3.66885561 EHI02663 1.6590876 8.68528216 17.5021482 1.77573172 EHI02664 0.8797522 1.67842756 10.8189021 3.59334368 EHI02665 1.3530223 8.45927663 10.8622509 3.56494434 EHI02666 0.7772609 5.05533393 8.5615855 1.44358288 EHI02667 0.6646793 2.25720854 7.5154444 2.54387451 EHI02668 0.7713225 0.61533293 11.1440351 1.60854376 EHI02669 0.6186671 2.19198064 6.2047538 1.73961044 EHI02670 0.7066807 6.48534358 2.8398548 1.35885748 EHI02671 0.6099077 6.69793619 4.4765836 0.25575900 EHI02672 0.7555689 4.27773321 6.8023493 1.22402779 EHI02673 1.1212504 6.00359678 14.4151757 1.25960215 EHI02674 1.3226743 1.14702137 11.5001905 10.53462956 EHI02675 0.7725862 11.50682250 2.0966824 0.23969346 EHI02676 0.5425090 5.29023643 3.2681275 0.40619273 EHI02677 0.7336743 0.36706295 14.2915536 0.28614657 EHI02678 0.6623755 1.47718139 8.1501070 0.98578572 EHI02679 0.6506381 0.43512590 10.2627640 1.23309249 EHI02680 0.3328090 3.88288708 1.4210251 0.14881605 EHI02681 0.3389079 1.76220214 3.4155844 0.64653370 EHI02683 0.3769425 2.40063549 0.9947723 2.00839381 EHI02684 0.4055536 3.04660391 3.1401241 0.21321577 EHI02685 0.1408909 0.69175275 0.9497866 0.22604362 EHI02686 0.3453540 3.21411258 1.8070316 0.48808136 EHI02687 0.4719383 4.82008929 2.4576517 0.25446676 EHI02688 0.6297850 0.79285573 8.3707803 2.60182892 EHI02689 0.2969110 1.11480534 2.0197544 0.19344212 EHI02690 0.5017530 2.70043724 2.3286060 2.47396095 EHI02691 0.2841506 1.80421452 2.2526564 0.21325578 EHI02692 0.3906465 4.67318176 0.9709162 0.06002790 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_9ls49mv2iuqvke1753k3 .table td.tinytable_css_no1mvwdihf8fc3wd0tam, .table th.tinytable_css_no1mvwdihf8fc3wd0tam { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 75.25 ± 17.12 3.3 ± 2.66 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["compositional-analysis.html", "Chapter 5 Compositional analysis 5.1 Taxonomy boxplot 5.2 Alpha diversity 5.3 Beta diversity", " Chapter 5 Compositional analysis load(&quot;data/data.Rdata&quot;) 5.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ species.y + region , scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 5.1 Taxonomy boxplot 5.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_wk8coz1d14m6oth1qt4g .table td.tinytable_css_pioz1xkqbi0969hypy7n, .table th.tinytable_css_pioz1xkqbi0969hypy7n { border-bottom: solid 0.1em #d3d8dc; } family mean sd Burkholderiaceae_B 0.5141200204 0.3104663319 Dermabacteraceae 0.0617975031 0.1433464553 Pseudomonadaceae 0.0501834620 0.1038191807 Akkermansiaceae 0.0451103808 0.1603564006 2013Ark19i 0.0438207259 0.1103701476 UBA2023 0.0362006270 0.1314313530 Beijerinckiaceae 0.0255528804 0.0875785137 Aestuariivirgaceae 0.0228697253 0.0696248129 Rhodocyclaceae 0.0197082991 0.0595392596 Methylophilaceae 0.0192892638 0.0308163272 Burkholderiaceae 0.0179156642 0.0345455025 Spirosomaceae 0.0137676267 0.0255289617 Diplorickettsiaceae 0.0126458894 0.0744379934 Sphingomonadaceae 0.0094480235 0.0273021210 Prolixibacteraceae 0.0094096257 0.0246115174 0.0081068094 0.0290378802 Nostocaceae 0.0076933419 0.0338878519 JACMRA01 0.0072221726 0.0325541446 Weeksellaceae 0.0063402808 0.0269820925 Flavobacteriaceae 0.0049571366 0.0099047194 UBA918 0.0044514296 0.0250858096 Pseudopelobacteraceae 0.0039062733 0.0107971496 Saprospiraceae 0.0034681985 0.0113527135 Arcobacteraceae 0.0033660883 0.0096670870 Paludibacteraceae 0.0032363543 0.0117821199 Erysipelotrichaceae 0.0031271145 0.0119101117 Cyclobacteriaceae 0.0029214824 0.0102970250 Anaerolineaceae 0.0023168318 0.0084981310 UBA5272 0.0023137623 0.0122895598 Nevskiaceae 0.0022145546 0.0073004041 Gemmatimonadaceae 0.0021550345 0.0061988497 Methylomonadaceae 0.0020518321 0.0071407413 S36-B12 0.0020302408 0.0089107250 Chromatiaceae 0.0020265451 0.0119583560 Marinilabiliaceae 0.0018456017 0.0108516538 Chitinophagaceae 0.0016220580 0.0056132725 Crocinitomicaceae 0.0015549804 0.0063664120 Microbacteriaceae 0.0014827148 0.0039763749 VadinHA17 0.0011823583 0.0044491822 UBA2103 0.0011693988 0.0056722341 Opitutaceae 0.0010533218 0.0061862662 Ignavibacteriaceae 0.0010022463 0.0048255222 JAAUTT01 0.0009321288 0.0054834550 Rhodobacteraceae 0.0009194467 0.0031158807 UBA9217 0.0008089232 0.0047521649 Absconditicoccaceae 0.0007735684 0.0045435741 UBA6164 0.0007065765 0.0041497780 NBLH01 0.0006269411 0.0036899269 UBA9973 0.0006258109 0.0021089612 Chthoniobacteraceae 0.0006074139 0.0035708359 Burkholderiaceae_A 0.0005718931 0.0016866760 Thiotrichaceae 0.0005619711 0.0023595274 Lentimicrobiaceae 0.0005594899 0.0024913135 Methanoregulaceae 0.0005073966 0.0023769239 Demequinaceae 0.0005013482 0.0029477401 SC72 0.0004830384 0.0027159310 Sphingobacteriaceae 0.0004531017 0.0026790392 B-17BO 0.0004141615 0.0024357525 UBA1547 0.0003850870 0.0018531892 Geobacteraceae 0.0003845487 0.0020896666 Holophagaceae 0.0002904385 0.0017066852 UBA11063 0.0002678297 0.0011262906 UBA1556 0.0002571661 0.0012302423 Metamycoplasmataceae 0.0002210942 0.0009167889 Caloramatoraceae 0.0002196482 0.0012969788 Silvanigrellaceae 0.0002089207 0.0017479561 Usitatibacteraceae 0.0002043524 0.0012002775 GWC2-37-73 0.0002037548 0.0011988262 CAIMLA01 0.0001978226 0.0011661746 UBA1402 0.0001934659 0.0010262721 Moraxellaceae 0.0001298399 0.0007630857 UBA7332 0.0001249401 0.0007347824 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + #geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 5.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_jlu4l0hb4c02uwn6iip4 .table td.tinytable_css_g823a78i9dk22uhy7lxq, .table th.tinytable_css_g823a78i9dk22uhy7lxq { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__RFTU01 3.759788e-01 0.3453918264 g__JAFFTF01 6.179750e-02 0.1433464553 g__Leptothrix 5.368285e-02 0.1393488533 g__Pseudomonas 5.018346e-02 0.1038191807 g__Luteolibacter 4.511038e-02 0.1603564006 g__JABFSX01 3.590896e-02 0.1315051420 g__CAIYZJ01 2.555288e-02 0.0875785137 g__CABJBCQ01 2.286973e-02 0.0696248129 g__Ideonella 1.567168e-02 0.0504040008 g__Polaromonas 1.489350e-02 0.0721772870 g__Rickettsiella_B 1.264589e-02 0.0744379934 g__Rhodoferax_C 1.185545e-02 0.0188864909 g__Methylotenera 1.167297e-02 0.0202075482 g__Hydrogenophaga 1.142669e-02 0.0384811415 g__Polynucleobacter 9.144791e-03 0.0300741943 g__Rhodocyclus 9.005955e-03 0.0463330299 g__UBA6024 8.872643e-03 0.0241127793 g__Rhodoferax 8.781102e-03 0.0194809759 g__Nodularia 7.693342e-03 0.0338878519 g__Arcicella 7.519394e-03 0.0176148948 g__Chryseobacterium 6.340281e-03 0.0269820925 g__JAAFJR01 5.713196e-03 0.0331516859 g__Flavobacterium 4.957137e-03 0.0099047194 g__JADJDQ01 4.884648e-03 0.0148329544 g__Methylophilus 4.489312e-03 0.0177039924 g__Sphingomonas_O 4.463288e-03 0.0233800963 g__OLB19 4.451430e-03 0.0250858096 g__Azonexus 4.364273e-03 0.0180866061 g__CAIPTY01 3.564718e-03 0.0107243719 g__Polymorphobacter 3.500544e-03 0.0148350890 g__Emticicia 3.478446e-03 0.0106344124 g__Aliarcobacter 3.366088e-03 0.0096670870 g__Dactylopiibacterium 3.300818e-03 0.0192644822 g__Paludibacter 3.236354e-03 0.0117821199 g__UBA2212 3.127114e-03 0.0119101117 g__JACPVY01 3.092093e-03 0.0182149244 g__CAILRJ01 2.975052e-03 0.0074270120 g__ELB16-189 2.921482e-03 0.0102970250 g__Acidovorax 2.650815e-03 0.0086525142 g__JADJBS01 2.646557e-03 0.0112523857 g__Sphaerotilus 2.614273e-03 0.0073561908 g__Propionivibrio 2.386971e-03 0.0136154811 g__T78 2.316832e-03 0.0084981310 g__Nevskia 2.214555e-03 0.0073004041 g__UBA11398 2.030241e-03 0.0089107250 g__Thiodictyon 2.026545e-03 0.0119583560 g__Spirosoma 1.920737e-03 0.0090391821 g__JAGPHP01 1.845602e-03 0.0108516538 g__Limnobacter 1.708062e-03 0.0051957229 g__Ferruginibacter 1.622058e-03 0.0056132725 g__Fluviicola 1.554980e-03 0.0063664120 g__Novosphingobium 1.484192e-03 0.0058634540 g__Methylomonas 1.183739e-03 0.0052008926 g__SR-FBR-E99 1.182358e-03 0.0044491822 g__C7867-001 1.169399e-03 0.0056722341 g__UBA4720 1.086071e-03 0.0050069127 g__Gemmatimonas 1.068963e-03 0.0039189315 g__JADKHC01 1.053322e-03 0.0061862662 g__Variovorax 1.042003e-03 0.0061271969 g__Fen-1301 1.002246e-03 0.0048255222 g__CAIQWF01 8.680927e-04 0.0051015566 g__JALRIJ01 8.490502e-04 0.0032311605 g__JALNZF01 8.089232e-04 0.0047521649 g__Telluria 7.574660e-04 0.0029900832 g__Aurantimicrobium 7.465482e-04 0.0032868989 g__Rhodoluna 7.361666e-04 0.0024744595 g__NBLH01 6.269411e-04 0.0036899269 g__UBA9973 6.258109e-04 0.0021089612 g__Gemmobacter_B 6.242031e-04 0.0026780183 g__CAIURC01 6.074139e-04 0.0035708359 g__Thiothrix 5.619711e-04 0.0023595274 g__Lentimicrobium 5.594899e-04 0.0024913135 g__JAAFHB01 5.369831e-04 0.0022803096 g__Methanoregula 5.073966e-04 0.0023769239 g__Demequina 5.013482e-04 0.0029477401 g__UBA5232 4.830384e-04 0.0027159310 g__Aquabacterium 4.501733e-04 0.0024692295 g__M3007 4.033138e-04 0.0015385866 g__Geomonas 3.845487e-04 0.0020896666 g__JACRCG01 3.415557e-04 0.0020091486 g__Stagnihabitans 2.952436e-04 0.0017061233 g__Holophaga 2.904385e-04 0.0017066852 g__Aquella 2.678297e-04 0.0011262906 g__Undibacterium 2.382002e-04 0.0010248911 g__JANJWP01 2.272000e-04 0.0013348318 g__RYZV01 2.210942e-04 0.0009167889 g__Silvanigrella 2.089207e-04 0.0017479561 g__JAEUMZ01 2.043524e-04 0.0012002775 g__UBA12068 2.037548e-04 0.0011988262 g__UBA8389 1.934659e-04 0.0010262721 g__Methylotenera_A 1.810189e-04 0.0007044704 g__Limnohabitans 1.528176e-04 0.0005139232 g__Aquirhabdus 1.298399e-04 0.0007630857 g__UBA7332 1.249401e-04 0.0007347824 g__CAJBIL01 7.184501e-05 0.0004221237 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() 5.2 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) 5.3 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
