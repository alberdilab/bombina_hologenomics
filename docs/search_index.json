[["index.html", "AlberdiLab | van-Riemsdijk et al. in prep Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | van-Riemsdijk et al. in prep Study title to be added Isolde van Riemsdijk1 Antton Alberdi2 2024-04-30 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/bombina_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Copenhagen, isolde.vanriemsdijk@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0154_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0154_counts.tsv.gz&quot;) %&gt;% rename(genome=1) 2.1.3 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0154_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) 2.1.4 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0154_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0154.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_hq96jo33lbfsol4x41v7 .table td.tinytable_css_38bz3tq0h1qgsga4wtsg, .table th.tinytable_css_38bz3tq0h1qgsga4wtsg { border-bottom: solid 0.1em #d3d8dc; } Total Average 234.38 6.01 ± 2.9 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_icur8wkmau2pufgrtrc6 .table td.tinytable_css_f5touqbdpzxt34ta76ga, .table th.tinytable_css_f5touqbdpzxt34ta76ga { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01695 0.3461828 0.04127063 5.3231392 0.80199873 EHI01696 0.4424049 0.22406116 5.3141198 4.05695179 EHI01697 0.4538495 1.90941404 2.9628133 4.69395227 EHI01698 0.3573398 0.09858151 1.6977632 5.58942195 EHI01699 0.7050913 0.96951518 9.4116284 3.07774468 EHI01700 0.6530752 3.56898382 5.5138204 2.60984563 EHI01701 0.6766729 1.02592777 10.7242590 4.17533136 EHI01702 2.0469307 6.03379949 3.6451975 0.70217678 EHI02539 0.3827939 2.10175438 0.7341786 2.45043071 EHI02540 0.2894728 0.06305983 4.0498375 0.68961085 EHI02541 0.3558753 1.56532915 3.5034385 0.20989734 EHI02542 0.3057734 0.50281622 3.7523407 0.76584212 EHI02543 0.2922985 1.49232932 2.3513462 0.49332743 EHI02544 0.2855385 1.56564203 2.7828575 0.31473293 EHI02545 0.2670672 0.73205372 2.5260356 0.85988218 EHI02546 0.2586405 0.16795995 3.4510473 0.41840957 EHI02547 0.3008971 0.81598900 2.5474111 0.65678012 EHI02548 0.4029082 3.01122533 1.4862550 0.64835330 EHI02549 0.2416728 2.25765984 1.6161885 0.06672974 EHI02550 0.3503026 1.60144298 2.7982737 0.43301264 EHI02551 0.3498223 1.58505167 4.2261049 0.17178287 EHI02552 0.3302045 0.22839638 2.5835061 2.14361127 EHI02553 0.3967339 4.87817718 0.9539922 0.09549991 EHI02554 0.3571701 2.80270276 1.9546888 0.04929602 EHI02555 0.2667084 0.11165708 4.4935412 0.06121415 EHI02556 0.3658946 0.61175432 3.9434814 0.34073173 EHI02557 0.3394130 0.18079785 4.6354747 0.52260554 EHI02558 0.2934713 2.77323519 1.0908703 0.11549899 EHI02559 0.3534224 1.47632000 3.1681721 0.47079627 EHI02561 0.2738579 1.43694682 0.6656280 1.31589493 EHI02562 0.3863222 2.31751232 2.6289383 0.12711286 EHI02563 0.1714629 0.64207433 1.0078409 0.20308848 EHI02564 0.3836564 2.85852293 1.6903230 0.46023434 EHI02565 0.3826623 3.07394910 1.7384740 0.08495871 EHI02566 0.2833160 0.28354132 3.1433991 1.01515216 EHI02567 0.3354668 0.96849190 1.8836652 0.13094068 EHI02568 0.3722740 1.50653673 1.4136073 1.60341127 EHI02569 0.3707787 1.83758111 2.5001016 0.15749297 EHI02570 0.4532710 4.17998256 0.9372078 0.06648314 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_5g7c2yomc1yx8p7slang .table td.tinytable_css_uqd73rcptwssiaa72qdl, .table th.tinytable_css_uqd73rcptwssiaa72qdl { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 75.89 ± 16.74 2.96 ± 2.62 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["compositional-analysis.html", "Chapter 5 Compositional analysis 5.1 Taxonomy boxplot 5.2 Alpha diversity 5.3 Beta diversity", " Chapter 5 Compositional analysis load(&quot;data/data.Rdata&quot;) 5.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ species.y + region , scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 5.1 Taxonomy boxplot 5.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_2ye0r9nu2hu3w9i25fj1 .table td.tinytable_css_ar33v6n2yc0azic63dy8, .table th.tinytable_css_ar33v6n2yc0azic63dy8 { border-bottom: solid 0.1em #d3d8dc; } family mean sd Burkholderiaceae_B 0.5184933394 0.3142314846 Akkermansiaceae 0.0914354819 0.2100638467 Dermabacteraceae 0.0776234173 0.1755448444 Pseudomonadaceae 0.0625924448 0.1081617852 2013Ark19i 0.0379526340 0.1047082018 Beijerinckiaceae 0.0302651062 0.1140669688 Rhodocyclaceae 0.0270419771 0.0923619494 Aestuariivirgaceae 0.0230870688 0.0843030005 Spirosomaceae 0.0205592004 0.0518530321 Methylophilaceae 0.0205109631 0.0305228251 Nostocaceae 0.0123772388 0.0571071302 Weeksellaceae 0.0119529670 0.0437097212 Diplorickettsiaceae 0.0098150309 0.0612948482 Prolixibacteraceae 0.0089066767 0.0243036683 Arcobacteraceae 0.0072578796 0.0268790426 Burkholderiaceae 0.0064959577 0.0138987912 Flavobacteriaceae 0.0059455222 0.0172087899 JACMRA01 0.0059419944 0.0289602904 Sphingomonadaceae 0.0055288041 0.0256170287 Saprospiraceae 0.0042304108 0.0174519264 NBLH01 0.0022008681 0.0137444170 Chitinophagaceae 0.0019864753 0.0065016916 Burkholderiaceae_A 0.0014278372 0.0033350917 S36-B12 0.0011985962 0.0057887582 JAAUTT01 0.0011063395 0.0069090879 Paludibacteraceae 0.0008515591 0.0053179846 Nevskiaceae 0.0007057063 0.0022973983 Marinilabiliaceae 0.0006798568 0.0042457044 Microbacteriaceae 0.0005078734 0.0017896896 Crocinitomicaceae 0.0004354713 0.0027195175 Silvanigrellaceae 0.0003976810 0.0024835170 UBA1547 0.0003679434 0.0013529196 UBA2023 0.0001196773 0.0007473843 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + #geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 5.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_mkc81n1xujg6hbpnh048 .table td.tinytable_css_473qb3ht2sygfzzhcdam, .table th.tinytable_css_473qb3ht2sygfzzhcdam { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__RFTU01 0.3912113031 0.3303781098 g__Luteolibacter 0.0914354819 0.2100638467 g__JAFFTF01 0.0776234173 0.1755448444 g__Pseudomonas 0.0625924448 0.1081617852 g__Leptothrix 0.0532217403 0.1348093991 g__CAIYZJ01 0.0302651062 0.1140669688 g__CABJBCQ01 0.0230870688 0.0843030005 g__Ideonella 0.0215829689 0.0636668988 g__Arcicella 0.0205592004 0.0518530321 g__Hydrogenophaga 0.0182975201 0.0643684925 g__Rhodocyclus 0.0135159645 0.0736724381 g__Nodularia 0.0123772388 0.0571071302 g__Polaromonas 0.0122659065 0.0766005615 g__Chryseobacterium 0.0119529670 0.0437097212 g__Rickettsiella_B 0.0098150309 0.0612948482 g__Methylotenera 0.0090566385 0.0170724454 g__UBA6024 0.0084601742 0.0237916131 g__Azonexus 0.0072782249 0.0454524997 g__Aliarcobacter 0.0072578796 0.0268790426 g__Flavobacterium 0.0059455222 0.0172087899 g__Rhodoferax 0.0054044965 0.0133252950 g__Methylophilus 0.0053975383 0.0201696172 g__Azohydromonas 0.0046581231 0.0130617669 g__JADJDQ01 0.0043467357 0.0115338915 g__Dactylopiibacterium 0.0043223064 0.0269927949 g__Sphingomonas_O 0.0040508892 0.0252977948 g__Rhodoferax_C 0.0031497918 0.0070255324 g__Sphaerotilus 0.0028174951 0.0081050213 g__Limnobacter 0.0027461100 0.0115597260 g__Methylotenera_A 0.0024778166 0.0090095631 g__NBLH01 0.0022008681 0.0137444170 g__CAILRJ01 0.0021728098 0.0070425444 g__Ferruginibacter 0.0019864753 0.0065016916 g__Novosphingobium 0.0014779149 0.0053425254 g__Acidovorax 0.0013118633 0.0045969888 g__UBA11398 0.0011985962 0.0057887582 g__Propionivibrio 0.0010139521 0.0061219021 g__Undibacterium 0.0008997715 0.0028810898 g__Paludibacter 0.0008515591 0.0053179846 g__Nevskia 0.0007057063 0.0022973983 g__JAGPHP01 0.0006798568 0.0042457044 g__Telluria 0.0006772664 0.0027378342 g__M3007 0.0006057360 0.0026468812 g__Rhodoluna 0.0005078734 0.0017896896 g__JAAFHB01 0.0004465026 0.0024132815 g__Fluviicola 0.0004354713 0.0027195175 g__Silvanigrella 0.0003976810 0.0024835170 g__Limnohabitans 0.0002253950 0.0009614602 g__JABFSX01 0.0001196773 0.0007473843 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() 5.2 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) 5.3 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
